/**
 * @description       : 
 * @author            : ChangeMeIn@UserSettingsUnder.SFDoc
 * @group             : 
 * @last modified on  : 05-14-2024
 * @last modified by  : ChangeMeIn@UserSettingsUnder.SFDoc
**/
//
// Generated by JSON2Apex http://json2apex.herokuapp.com/
//
// The supplied json has fields with names that are not valid in apex
// and so we extend the class "JSONReservedSerializer" that allow us 
// transform "not valid names" to a valid name (see OUTER_DTO_MAPPINGS)

public class JSON2KbrwOrderV2 extends JSONReservedSerializer  {

    public JSON2KbrwOrderV2() {
      //setup mappings
      super(new Map<Type,Map<String,String>>{
        JSON2KbrwOrderV2.class => OUTER_DTO_MAPPINGS
      });
    }
  
    //define DTO's using mapped names
    static final Map<String, String> OUTER_DTO_MAPPINGS = new Map<String, String> {
        'currency_Z' => 'currency',
        'date_Z' => 'date',
        'by_Z' => 'by',
        'transactionInfo' => 'transaction',
		'ca' => 'CA'
    };

	public override Object deserialize(String jsonString, System.Type type){

        system.debug('CAR-JGU-deserialize-1');	
		JSON2KbrwOrderV2 json2KbrwOrder = (JSON2KbrwOrderV2) super.deserialize(jsonString, type);
        system.debug('CAR-JGU-deserialize-2');	
		// Order statusIconics
		// json2KbrwOrder.orderStatusIconics = json2KbrwOrder.getOrderStatus(json2KbrwOrder.order_id);
		Order__c order = json2KbrwOrder.getOrder(json2KbrwOrder.order_id);
		json2KbrwOrder.orderStatusIconics = order.statusIconics__c;
		json2KbrwOrder.order_SF_Id = order.Id;
        system.debug('CAR-JGU-deserialize-3');
		// Account
		Account acc = json2KbrwOrder.getAccount(json2KbrwOrder.order_id);
		json2KbrwOrder.account = acc;
        system.debug('CAR-JGU-deserialize-4');
		// Store	
		List<String> listStoreId = new List<String> ();
		// retrieve list of store ID
		String storeRmsId = json2KbrwOrder.requesting_location?.rms_id;
		listStoreId.add(storeRmsId);
        system.debug('CAR-JGU-deserialize-5');
		// get records of list of store ID
		Map<String,Store__c> storeMap  = json2KbrwOrder.getStoreName(listStoreId);
        system.debug('CAR-JGU-deserialize-6');
		// Set store values
		json2KbrwOrder.store = storeMap.get(storeRmsId);
        system.debug('CAR-JGU-deserialize-7');
		// Client Advisor
		String WWEmployeeId = json2KbrwOrder.ca?.WWEmployeeId;
		User usr = json2KbrwOrder.getUserDetails(WWEmployeeId);
		if (usr != null) json2KbrwOrder.ca.Name = usr.Name;
		else {
			json2KbrwOrder.ca.Name = 'CA not found';
		}
        system.debug('CAR-JGU-deserialize-7.1');
		json2KbrwOrder.initOrderLine();
        system.debug('CAR-JGU-deserialize-8');
		Map<String,OrderShipping__c> shippings = json2KbrwOrder.getShipping(json2KbrwOrder.order_id);
		json2KbrwOrder.initOrderLineReason(shippings);
        system.debug('CAR-JGU-deserialize-9');
		json2KbrwOrder.initOrderLineStatusIconics();
        system.debug('CAR-JGU-deserialize-10');
		Map<String,ProductReferential__c> skuProductByCode = json2KbrwOrder.getProductBySKU(json2KbrwOrder.getSkuIdList());
		system.debug('skuProductByCode: '+skuProductByCode);
        system.debug('CAR-JGU-deserialize-10-a');
		json2KbrwOrder.initOrderLineProductDetails(skuProductByCode);
        system.debug('CAR-JGU-deserialize-10-b');
		json2KbrwOrder.initOrderLineCustomizations(skuProductByCode);
        system.debug('CAR-JGU-deserialize-11');
		Map<String, ProductCatalogue__c> productCatalogMap  = json2KbrwOrder.getProductMap(json2KbrwOrder.getSkuIdList());	
		json2KbrwOrder.initOrderLineProductCatalogue(productCatalogMap);
        system.debug('CAR-JGU-deserialize-12');
	    json2KbrwOrder.initOrderLineLinkedShippingGroup();
        system.debug('CAR-JGU-deserialize-13');
		Map<String, Map<String, Order_Note__c>> orderNotes  = json2KbrwOrder.getOrderNotes(json2KbrwOrder.order_id);
		json2KbrwOrder.traceabilities = json2KbrwOrder.getTraceability(json2KbrwOrder.order_id);
        system.debug('CAR-JGU-deserialize-14');
		json2KbrwOrder.initOrderOrderNote(orderNotes?.get(json2KbrwOrder.order_id));
		system.debug('CAR-JGU-5');	
		json2KbrwOrder.initOrderLineOrderNote(orderNotes);
		Map<String, Map<String, Case>> approvalCases  = json2KbrwOrder.getRelatedApprovalCases(json2KbrwOrder.order_id);
		json2KbrwOrder.initApprovalCases(approvalCases);

		return json2KbrwOrder;
    }


// ------------------------------------------------------------- //
//                ORDER LEVEL - ATTRIBUTES IN JSON               //
// ------------------------------------------------------------- //

	// /!\ Order_id == Order__c.orderNumber__c
	@AuraEnabled
	public String order_id {get;set;} // OrderId
	@AuraEnabled
	public String xstore_request_id {get;set;}	
	/////////      CSC-1159 Check order version V1 or V2 for manualRefundShippingFees     /////////
	@AuraEnabled
	public String version {get;set;}	
	@AuraEnabled
	public String preferred_language {get;set;} 
	@AuraEnabled
	public String requesting_system {get;set;}
	@AuraEnabled
	public String channel {get;set;} // TWIST-27414
	@AuraEnabled
	public ClientAdvisor ca {get;set;}
	@AuraEnabled
	public Requesting_location requesting_location {get;set;} 
	@AuraEnabled // in json: transaction
	public TransactionInfo transactionInfo {
		get {
			if (transactionInfo == null) return new TransactionInfo();
			else return transactionInfo;
		}
		set;}
	@AuraEnabled
	public List<Tenders> tenders {get;set;} 
	@AuraEnabled
	public Sold_to sold_to {get;set;}
	@AuraEnabled
	public List<Shipping_groups> shipping_groups {get;set;}
    @AuraEnabled
	public String order_type {get;set;}
    @AuraEnabled
	public String version {get;set;}
    @AuraEnabled
    public List<Fees> fees {
		get {
			if (fees == null) return new List<Fees>();
			else return fees;
		}
		set;}
    @AuraEnabled
	public String currency_z {get;set;}
	@AuraEnabled
	public Datetime creation_date {get;set;}
	
	// ---------------------------------------------------------------------- //
	//                ORDER LEVEL - CUSTOM ATTRIBUTES & METHODS               //
	// ---------------------------------------------------------------------- //
	@AuraEnabled
	public Datetime createdDate {
		get {
			return creation_date;
		}
	}
    @AuraEnabled public List<Shipping_groups> order_lines {
        get {
            return this.shipping_groups;
        }
    }

	@AuraEnabled public Id order_SF_Id {get;set;}

	@AuraEnabled public String orderStatusIconics {get;set;}

	@AuraEnabled public Map<String, List<shippingGroupStatus__mdt>> orderShippingStatus;

	@AuraEnabled
	public Boolean isTwist {
		get {
			if (requesting_system != null) {
				return (requesting_system.equals('SFB2C') || requesting_system.equals('ICONICS') || requesting_system.equals('LVCOM')); // TWIST-29850
			}
			else {
				return false;
			}
		}
	}

	//CSC-574 If Order Number starts with 'nx', it is an ATG migrant order
	@AuraEnabled
	public Boolean isATG {
		get {
			return (order_id.startsWith('nx'));
		}
	}

	@AuraEnabled
	public Ship_to ship_to {
		get {
			Ship_to shipTo = new Ship_to();
			for(Shipping_groups orderLine: this.shipping_groups) {
				if (orderLine.fulfillment_type != 'RETURN') {
					shipTo = orderLine.ship_to;
					break;
				}
			}		
			return shipTo;	
		}
	} 

	@AuraEnabled
	public String fulfillment_type {
		get {
			String fulfillmentType;
			for(Shipping_groups orderLine: this.shipping_groups) {
				if (orderLine.fulfillment_type != 'RETURN') {
					fulfillmentType = (orderLine.fulfillment_type != null)?orderLine.fulfillment_type:'-';
					break;
				}
			}		
			return fulfillmentType;
		}
	}	
	
    //<SLI> shipments is a list, only take ths first return for firstShipment
	@AuraEnabled
	public Shipments firstShipment {
		get {
            Shipments shipments = new Shipments();

            for(Shipping_groups shippingGroups: this.shipping_groups) {
				if (shippingGroups.fulfillment_type != 'RETURN' && shippingGroups.shipments != null && shippingGroups.shipments?.size() > 0 ) {
					shipments = shippingGroups.shipments[0];
				}
			}

			return shipments;
		}
	}

	@AuraEnabled
	public Tenders paymentMethod {
		get {
			Tenders firstTenders = new Tenders();
			if (tenders?.size() > 0) firstTenders = tenders.get(0);
			return firstTenders;
		}
	}

	
	@AuraEnabled
	public String gift_message {
		get {
			String value = '';
			String separator = '';
			for(Shipping_groups orderLine: this.shipping_groups) {
				if (String.isNotBlank(orderLine.gift_message) && (orderLine.fulfillment_type != 'RETURN') ) {
					value = value + separator + orderLine.gift_message;
					separator = ', ';
				}
			}
			return value;
		}
	}

	@AuraEnabled
	public String samples {
		get {
			String value = '';
			String separator = '';
			for(Shipping_groups orderLine: this.shipping_groups) {
				if (String.isNotBlank(orderLine.samples)) {
					value = value + separator + orderLine.samples;
					separator = ', ';
				}
			}
			return value;
		}
	}

	@AuraEnabled
	public String shoppingBag {
		get {
			Boolean isShoppingBag = false;
			for(Shipping_groups orderLine: this.shipping_groups) {
				if(!isShoppingBag) {
					isShoppingBag = !String.isBlank(orderLine.shoppingBag);
					break;
				}
			}
			return isShoppingBag?'Yes':'No';
		}
	}

	@AuraEnabled
	public Map<String, List<String>> productsByOrderActions {
		get {
			Map<String, List<String>> productByOrderAction = new Map<String, List<String>>();
			for(Shipping_groups orderLine: this.shipping_groups) {
				for(String availableAction: orderLine.available_actions) {
					if (!productByOrderAction.containsKey(availableAction)) {
						productByOrderAction.put(availableAction, new List<String>());
					}
					productByOrderAction.get(availableAction).add(orderLine.shippingNumber);
				}
			}
			return productByOrderAction;
		}
	}

	@AuraEnabled
	public List<Traceability__c> traceabilities {get;set;}
	// Account = Client
	@AuraEnabled
	public Account account {get;set;} 

	// Account = Client
	@AuraEnabled
	public Store__c store {get;set;} 

	// TODO - What do we display for kitting ?
	// 		=> do we sum the lines[i].qty or display only the qty of the master (the one with the kit_flag = 'Y') or ... ?  
	@AuraEnabled
	public Integer sumOfProducts {
		get {
			Integer sumOfProducts = 0;
			for(Shipping_groups orderLine: this.shipping_groups) {
				if( orderLine.fulfillment_type != 'RETURN') {
                    for(Lines line: orderLine.lines) {
						if (orderLine.isKit) {
							if (line.kit_flag == 'Y') {
								sumOfProducts = sumOfProducts + line.qty;
							}
						}
						else {
                        	sumOfProducts = sumOfProducts + line.qty;
						}
                    }
                }
			}
			return sumOfProducts;
		}
	}

	// TODO -> same as sumOfProducts ?
	//naomi TWIST-14379
	@AuraEnabled
	public Integer sumOfProductsReturned {
		get {
			Integer sumOfProductsReturned = 0;
			for(Shipping_groups orderLine: this.shipping_groups) {
				if( orderLine.fulfillment_type == 'RETURN' && orderLine.status !='cancelled') {
                    for(Lines line: orderLine.lines) {
						if (orderLine.isKit) {
							if (line.kit_flag == 'Y') {
								sumOfProductsReturned = sumOfProductsReturned + line.qty;
							}
						}
						else {
                        	sumOfProductsReturned = sumOfProductsReturned + line.qty;
						}                        
                    }
                }
			}
			return sumOfProductsReturned>0?sumOfProductsReturned:null;
		}
	}

    // <TODO> How to calculate this ?
	@AuraEnabled
	public Double sumOfShippingFees{
		get {
			Double sumOfShippingFees;

			// for(Shipments shipment: this.shipments)  {
			// 	if (shipment.delivery_fees != null) {
			// 		sumOfShippingFees = (sumOfShippingFees==null?0:sumOfShippingFees) + shipment.delivery_fees;
			// 	}
			// }

			for (Fees fee: this.fees) {
				if (fee.type == 'shipping_fee') {
					sumOfShippingFees = (sumOfShippingFees==null?0:sumOfShippingFees) + fee.total_amount;
				}
			}

			return sumOfShippingFees;
		}
	}

    // <TODO> How to calculate this ?
	// TWIST-36041
	@AuraEnabled
	public Double sumOfShippingFeesWithoutTax{
		get {
			Double sumOfShippingFeesWithoutTax;
			if(fees != null && !fees.isEmpty()) {
				for (Fees fee: this.fees) {
					if (fee.type == 'shipping_fee') {
						sumOfShippingFeesWithoutTax = (sumOfShippingFeesWithoutTax==null?0:sumOfShippingFeesWithoutTax) + fee.amount_tax_free;
					}
				}
			} else if (shipping_groups != null ) {
				for(Shipping_groups shippingGroups: this.shipping_groups) {
					if (shippingGroups.shipments != null && !shippingGroups.shipments.isEmpty() ) {
						sumOfShippingFeesWithoutTax = (sumOfShippingFeesWithoutTax==null?0:sumOfShippingFeesWithoutTax) + (shippingGroups.shipments[0].delivery_fees_without_tax != null ? shippingGroups.shipments[0].delivery_fees_without_tax : 0);					
					}
				}
			}
			return sumOfShippingFeesWithoutTax;
		}
	}

	    // <TODO> How to calculate this ?
	// TWIST-36041
	@AuraEnabled
	public Double sumOfAdditionalFees{
		get {
			Double sumOfAdditionalFees;
			// for(Shipments shipment: this.shipments)  {
			// 	if (shipment.delivery_fees_without_tax != null) {
			// 		sumOfShippingFeesWithoutTax = (sumOfShippingFeesWithoutTax==null?0:sumOfShippingFeesWithoutTax) + shipment.delivery_fees_without_tax;
			// 	}
			// }
			for (Fees fee: this.fees) {
				if (fee.type == 'retail_fee') {
					sumOfAdditionalFees = (sumOfAdditionalFees==null?0:sumOfAdditionalFees) + fee.amount_tax_free;
				}
			}
			return sumOfAdditionalFees;
		}
	}

    // <TODO> How to calculate this ?
	// TWIST-36041 : "subtotal  - additionnal_fees"
	// TWIST-32320 : "subtotal  - additionnal_fees"
	@AuraEnabled
	public Double subTotalWithoutShippingFees{
		get {
			Double subTotalToSubstract = 0;
			Double subTotal = this.transactionInfo.subtotal;
			Double additionnal_fees = this.sumOfAdditionalFees;
			Double sumOfShippingFeesWithoutTax = this.sumOfShippingFeesWithoutTax;

			if (sumOfShippingFeesWithoutTax != null) {
				subTotalToSubstract = subTotalToSubstract + sumOfShippingFeesWithoutTax;
			}
			if (additionnal_fees != null) {
				subTotalToSubstract = subTotalToSubstract + additionnal_fees;
			}

			if (subTotalToSubstract != null) {
				return subTotal - subTotalToSubstract;
			}
			else {
				return subTotal;
			}
		}
	}


	// Free Shipping Reason
	@AuraEnabled public String freeShippingReason {
		// get {return 'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed non risus. Suspendisse lectus tortor, dignissim sit amet, adipiscing nec, ultricies sed, dolor.';} set;}
		get;set;}

	// Pay By Link
	@AuraEnabled public String payByLink {
		// get {return 'http://www.google.fr/';} set;}
		get;set;}
	@AuraEnabled public Boolean isPayByLinkExpired {
		get;set;}

	// Extended Pay By Link
	@AuraEnabled public String extendedPayByLink {
		// get {return 'http://www.google.fr/';} set;}
		get;set;}
	@AuraEnabled public Boolean isExtendedPayByLinkExpired {
		get;set;}

	// Extended PAY AFTER AGREEMENT
	@AuraEnabled public Order_Note__c payAfterAgreement {
		get;set;}
	@AuraEnabled public String payAfterAgreementLink {
		get;set;}		
	@AuraEnabled public Boolean isPayAfterAgreementLinkExpired {
		get;set;}

	// Extended PERSO_PRODUCT_ACC
	@AuraEnabled public Order_Note__c persoProductAccepted {
		get;set;}

	// Extended PERSO_PRODUCT_REF
	@AuraEnabled public Order_Note__c persoProductRefused {
		get;set;}
	@AuraEnabled public String persoProductRefusedReason {
		get;set;}

	@AuraEnabled public String pricingIconLabel {
		get {
			String pricingIconLabel = '';
			String lineBreak = '';
			if (String.isNotBlank(freeShippingReason)) {
				pricingIconLabel = 'Waived Shipping fee';
				lineBreak = '\r';				
			}
			for (Shipping_groups orderLine: shipping_groups) {
				if (orderLine.discount.amount != null) {		
					pricingIconLabel = pricingIconLabel + lineBreak + 'Price Adjustment';
					break;
				}
			}
				
			return pricingIconLabel;
		}
	}

	// Is the Order a "Exchange" ?
	@AuraEnabled public Boolean isExchange {
		get {
			List<String> orderLineRequestIds = new List<String>();

			// loop over order_line and check if there is a Return SG in linked_SG that not is in order_line
			for(Shipping_groups orderLine: this.shipping_groups) {
				orderLineRequestIds.add(orderLine.request_id);
			}

			integer exchangeCount = 0;
			for (Shipping_groups orderLine : this.shipping_groups) {
                system.debug('orderLine.order_type: '+orderLine.order_type);
                system.debug('orderLine.fulfillment_type: '+orderLine.fulfillment_type);
				if (orderLine.order_type.equals('EXCHANGE') && orderLine.fulfillment_type.equals('DELIVERY')) {
					return true;
				}

				for(LinkedShippingGroup lsg: orderLine.linked_shipping_groups) {
					system.debug(' in orderLine.linked_shipping_groups: ');

					if(lsg.fulfilment_type == 'RETURN') {
						if(!orderLineRequestIds.contains(lsg.request_id)) {
							return true;
						}
					}
				}
			}

			return false;
		}}

// ---------- //
// END CUSTOM //
// ---------- //


// ----------------------------------------------------------------------------
// Inner Classes
// ----------------------------------------------------------------------------
	public class Discount {
		@AuraEnabled public String id {get;set;} 
		@AuraEnabled public String description {get;set;} 
		@AuraEnabled public Double amount {get;set;} 
	}
	
	public class Personalization {
		@AuraEnabled public String display_date {get;set;} 
		@AuraEnabled public String display_separator {get;set;} 
		@AuraEnabled public String display_letters {get;set;} 
		@AuraEnabled public Boolean display_vertical {get;set;} 
		@AuraEnabled public String display_colorCode {get;set;} 
		@AuraEnabled public String display_finish {get;set;} 
		@AuraEnabled public String font_size {get;set;} 

		// Custom
		@AuraEnabled public string display_colour {
			get {
				if (this.display_finish != null) {
					return this.display_finish;
				}
				else if (this.display_colorCode != null) {
					return this.display_colorName;
				}
				else {
					return 'SILVER';
				}
			}			
		}
		@AuraEnabled public Boolean isDisplayColorCode {
			get {
				return (this.display_finish == null && this.display_colorCode != null);
			}			
		}

		// TWIST-27986
		@AuraEnabled public String display_colorName {
			get {
				if (this.display_colorCode != null) {
					return ICX_ColorService.getColorNameFromHexCode(this.display_colorCode);
				}
				else {
					return null;
				}
			}			
		}
		
		// TWIST-30647
		@AuraEnabled public string display_letters_with_separator {
			get {
				String strToDisplay = this.display_letters;

				if (this.display_separator == 'DOT' && strToDisplay!=null && !strToDisplay.contains('.')) {
					strToDisplay = String.join(strToDisplay.split('/*'),'.');
				}

				return (strToDisplay);
			}
		}

		// TWIST-30647
		@AuraEnabled public string display_date_with_separator {
			get {
				String strToDisplay = this.display_date;

				if (this.display_separator == 'DOT' && strToDisplay!=null && !strToDisplay.contains('.')) {
					Pattern p = Pattern.compile('(\\d{2})(\\d{2})(\\d{2})');
					Matcher pm = p.matcher( strToDisplay );
					
					if( pm.matches() && pm.groupCount() == 3 ){						 
						strToDisplay = pm.group(1) + '.' + pm.group(2) + '.' + pm.group(3);
					}

				}

				return (strToDisplay);
			}
		}
		
	}
	
	public class Address {
		@AuraEnabled public String address1 {get;set;} 
		@AuraEnabled public String address2 {get;set;} 
		@AuraEnabled public String address3 {get;set;} 
		@AuraEnabled public String address4 {get;set;} 
		@AuraEnabled public String city {get;set;} 
		@AuraEnabled public String province {get;set;} 
		@AuraEnabled public String postal_code {get;set;} 
		@AuraEnabled public String country {get;set;} 
		@AuraEnabled public String gps_lat {get;set;} 
		@AuraEnabled public String gps_lon {get;set;} 

		// Custom		
		@AuraEnabled public String address {
			get {
				return address1 + ' ' + address2 + ' ' + address3;
			}
		} 
	}
	
	public class Eta {
		@AuraEnabled public String min {get;set;} 
		@AuraEnabled public String max {get;set;} 
	}
	
	public class Customizations {
		@AuraEnabled public String code {get;set;} 
		@AuraEnabled public String message {get;set;} 
		@AuraEnabled public Personalization personalization {get;set;} 

		@AuraEnabled public String label {get;set;} 
	}
	
	public class Ship_to {
		@AuraEnabled public Name name {get;set;} 
		@AuraEnabled public Address address {get;set;} 		
		@AuraEnabled public String email {get;set;} 
		@AuraEnabled public String phone1 {get;set;} 
		@auraEnabled public String special_instructions {get;set;}
		@AuraEnabled public String phone2 {get;set;} 
	}
	
	public class Sold_to {
		@AuraEnabled public String customer_no {get;set;} 
		@AuraEnabled public String email {get;set;} 
		@AuraEnabled public String phone1 {get;set;} 
		@AuraEnabled public String phone2 {get;set;} 
		@AuraEnabled public String nationality {get;set;} 
		@AuraEnabled public String type {get;set;} 
		@AuraEnabled public Name name {get;set;} 
		@AuraEnabled public Address address {get;set;} 
		@AuraEnabled public Fiscal fiscal {get;set;} 
	}
	
	public class Leadtime {
		@AuraEnabled public Integer min {get;set;} 
		@AuraEnabled public Integer max {get;set;} 
	}
	
	public class Segments {
		@AuraEnabled public Requesting_location ship_from_location {get;set;} 
		@AuraEnabled public Requesting_location ship_to_location {get;set;} 
		@AuraEnabled public Requesting_location next_ship_to_location {get;set;} 
		@AuraEnabled public String state {get;set;} 
	}
	
	public class Logs {
		@AuraEnabled public String by_Z {get;set;} // in json: by
		@AuraEnabled public String date_Z {get;set;} // in json: date
		@AuraEnabled public String message {get;set;} 
		@AuraEnabled public String status {get;set;} 
		@AuraEnabled public Requesting_location location {get;set;}

		// Custom
		@AuraEnabled public String locationName {
			get {
				return location?.name;
			}}
		@AuraEnabled public String statusIconics {get;set;}
		@AuraEnabled public String statusColor {get;set;}
		@AuraEnabled public String messageIconics {get;set;}
	}
	
	public class Fiscal {
		// CSC-248
		@AuraEnabled public String tax_type {get;set;}			 
		@AuraEnabled public String fiscal_code {get;set;}
		@AuraEnabled public String tax_code {get;set;}
		@AuraEnabled public String tax_codeValue {get {
			// Non-business person electronic invoice
			if(tax_code=='A') return '非營業人電子發票';
			// Business person electronic invoice
			else if(tax_code=='B') return '營業人電子發票';
			// Cloud Invoice-Cell Phone Barcode Carrier
			else if(tax_code=='D') return '雲端發票 - 手機條碼載具';
			// Cloud Invoice-Citizen Digital Certificate Carrier
			else if(tax_code=='E') return '雲端發票 - 自然人憑證載具';
			// Cloud Invoice-Donate
			else if(tax_code=='F') return '雲端發票 - 捐贈';
			else return tax_code;
		}
		set;}  
		@AuraEnabled public String tax_invoice_number {get;set;} 
		@AuraEnabled public String legal_email {get;set;} 
		@AuraEnabled public String charity_code {get;set;} 
		@AuraEnabled public String tax_system {get;set;} 
		@AuraEnabled public String destination_code {get;set;} 
	}
	
	public class TransactionInfo {
		@AuraEnabled public Double total {get;set;}  //double type naomi 12/23 
		@AuraEnabled public Double tax_amount {get;set;} //double type naomi 12/23 
		@AuraEnabled public Double subtotal {get;set;}  //double type naomi 12/23 
		@AuraEnabled public Double deposit_rate {get;set;}
		@AuraEnabled public String deposit {get;set;}
		@AuraEnabled public Datetime date_Z {get;set;} // in json: date
		@AuraEnabled public String currency_Z {get;set;} // in json: currency
		@AuraEnabled public String balance_due {get;set;} 
		@AuraEnabled public Double tax_rate {get;set;} 
		@AuraEnabled public Double additional_fees {get;set;} // TWIST-37174 : new field
	}
	
	public class Name {
		@AuraEnabled public String company_name {get;set;} 
		@AuraEnabled public String prefix {
			get {
				if(prefix.contains('tMrs')) return 'Mrs';
				else if(prefix.contains('tMr')) return 'Mr';
				else if(prefix.contains('tMs')) return 'Ms';
				else if(prefix.contains('tMx')) return 'Mx';
				else if(prefix.contains('tUnknown')) return 'Prefer not to say';
				else return prefix;
			}
			set;} 
		@AuraEnabled public String first {get;set;} 
		@AuraEnabled public String middle {get;set;} 
		@AuraEnabled public String last {get;set;} 
		@AuraEnabled public String suffix {get;set;} 

		// Custom
		@AuraEnabled public String fullName {
			get {
				return prefix + ' ' + first + ' ' + last; //naomi 08/11 fix on full name
			}
		}
	}

	public class LinkedShippingGroup {		
		@AuraEnabled public String request_id {get;set;}
		@AuraEnabled public String fulfilment_type {get;set;}
		// Custom
		@AuraEnabled public String status {get;set;} // TWIST-29860 - Can by empty in case of Exchange. In our case is usefull in order to determine if the SG has a pending return or not
		@AuraEnabled public Boolean isPartOfThisOrder {get;set;} // TWIST-29860 - usefull ? I'm not sure...
	}
	
	public class Shipping_groups {
		@AuraEnabled public Boolean priority {get;set;} 
		@AuraEnabled public List<String> available_actions {get;set;} 
		@AuraEnabled public String fulfillment_type {get;set;} 
		@AuraEnabled public Ship_to ship_to {get;set;}
		@AuraEnabled public Requesting_location source_location {get;set;} 
		@AuraEnabled public Requesting_location return_location {get;set;} 
		@AuraEnabled public List<Logs> logs {get;set;} 
		@AuraEnabled public String order_type {get;set;} 
		// @AuraEnabled public Leadtime initial_leadtime {get;set;} 
		@AuraEnabled public Leadtime leadtime {get;set;} //naomi fix for leadtime label 07/2023

		@AuraEnabled public Leadtime revised_leadtime {get;set;}
		// The list of related shipping group (status != cancel)
		@auraEnabled public List<LinkedShippingGroup> linked_shipping_groups {
			get {
				if (this.linked_shipping_groups == null) return new List<LinkedShippingGroup>();
				else return this.linked_shipping_groups;
			}
			set;}
		//@AuraEnabled public String id {get;set;} 
		@AuraEnabled public String creation_date {get;set;} 
		@AuraEnabled public String request_id {get;set;} 
		@AuraEnabled public Requesting_location pickup_location {get;set;} 
		//@AuraEnabled public Eta initial_eta {get;set;} 
		@AuraEnabled public Eta  eta {get;set;} //naomi initial eta label fix 10/2023
		@AuraEnabled public Eta revised_eta {get;set;} 
		@AuraEnabled public Double tax_amount {get;set;} 
		
		@AuraEnabled public Discount discount {get;set;} 
		@AuraEnabled public List<Taxes> taxes {get;set;} 
		@AuraEnabled public List<Customizations> additional_services {
			get {
				if (this.additional_services == null) return new List<Customizations>();
				else return this.additional_services;
			}
			set;} 
		@AuraEnabled public String status {
			// get {
			// 	if (isTwist && (statusIconics != null))
			// 		return statusIconics;
			// 	else return status;
			// }	
			get;
			set;} 
		//@AuraEnabled public List<Segments> segments {get;set;}V2

        // V2
        // <SLI> Change shipments back to list
        @AuraEnabled public List<Shipments> shipments {get;set;}
        @AuraEnabled public List<Lines> lines {get;set;} 

		// Custom Fields
        @AuraEnabled public String id {
            get {
                return reason.Id;
            }
        }

        @AuraEnabled public Boolean isKit {
            get {
                for (Lines line: lines) {
                    if (line.kit_flag == 'Y') {
                        return true;
                    }
                }
                return false;
            }
        }

		@AuraEnabled public Lines lineMaster {
			get {
				Lines lineMaster;
				for (Lines line: lines) {
					// kitting master
                    if (line.kit_flag == 'Y') {
                        lineMaster = line;
						break;
                    }
                }
				
				if (lineMaster == null) {
					lineMaster = lines[0];
				}
                
				return lineMaster;
			}
		}

		@AuraEnabled public String item_id {
            get {
                return lineMaster.item_id;
            }
		}
		@AuraEnabled public Integer qty {
            get {
                return lineMaster.qty;
            }
		}
		@AuraEnabled public Integer line_number {
            get {
                return lineMaster.line_number;
            }
		} 
		@AuraEnabled public Double unit_price {
			get {
				return lineMaster.unit_price;
			}
		}
		@AuraEnabled public String item_description {
            get {
                return lineMaster.item_description;
            }
        }    
		@AuraEnabled public String unit_price_tax_free {
            get {
                return lineMaster.unit_price_tax_free;
            }
		}
		@AuraEnabled public Double line_amount_tax_free {
            get {
                return lineMaster.line_amount_tax_free;
            }
		}   
		@AuraEnabled public Double line_amount {
            get {
                return lineMaster.line_amount;
            }
		} 
		
		@AuraEnabled public Boolean isTwist {get;set;}		
		@AuraEnabled public Boolean isATG {get;set;}
		@AuraEnabled public Tenders paymentMethod {get;set;}
		@AuraEnabled public String orderChannel {get;set;} //TWIST-27414
		@AuraEnabled public Boolean isExchange {get;set;} //TWIST-34953
		// Is the OrderLine a "return" ?
		@AuraEnabled public Boolean isReturn {
			get {
				return this.fulfillment_type == 'RETURN';
			}}
		@AuraEnabled public Boolean hasPendingReturn {
			get {
				//TWIST-29860
				system.debug('JGU-this.linked_shipping_groups.size(): '+this.linked_shipping_groups.size());
				for(LinkedShippingGroup lsg: this.linked_shipping_groups) {
					if(lsg.fulfilment_type == 'RETURN') {
						if(lsg.isPartOfThisOrder && lsg.status != 'cancelled') {
							return true;
						}
					}
				}
				return false;
			}
		}
		@AuraEnabled public Boolean hasPendingPaymentInLogs{
			get {
				Boolean hasPendingPayment = false;
				for(Logs log: this.logs) {
					if (log.status == 'pending_payment') {
						hasPendingPayment = true;
					}
				}
				return hasPendingPayment;
			}
		}
		

		@AuraEnabled public Shipments shipment {
            get {
                Shipments shipmentToReturn = new Shipments();
                for(Shipments shipment: this.shipments) {
                    if ((shipment?.carrier_service != null) && !shipment?.carrier_service?.toUpperCase().contains('RETURN')) {
                        shipmentToReturn = shipment;
                        break;
                    }                    
                }
                return shipmentToReturn;
                //return this.shipments[0];
            }
            set;}
        
        // <TODO> I don't know how to retrieve the information because, shipments is not anymore a list or records :/
        // <SLI> put shipments loop back, shipments is a list
		@AuraEnabled public Shipments shipmentReturn {
            get {
                Shipments shipmentToReturn = new Shipments();
                for(Shipments shipment: this.shipments) {
                    if ((shipment?.carrier_service != null) && shipment?.carrier_service?.toUpperCase().contains('RETURN')) {
                        shipmentToReturn = shipment;
                        break;
                    }                    
                }
                return shipmentToReturn;
            }
            set;}

		@AuraEnabled public String currency_Z {get;set;}
		@AuraEnabled public ProductCatalogue__c productCatalogue {
			get {
				return this.lineMaster.productCatalogue;
			}
		}	
		@AuraEnabled public String productName {
			get {
				return this.lineMaster.productName;
			}
		}	
		@AuraEnabled public String productImage {
			get {
				return this.lineMaster.productImage;
			}
		}	

		@AuraEnabled public String shippingNumber {
			get {
				//return this.request_id+'-'+this.lines[0].line_number; // <TODO> tbc the rule for kitting ?
				return this.request_id; // <TODO> tbc the rule for kitting ?
			}
		}
		@AuraEnabled public OrderShipping__c reason {get;set;}
		// Copy the attribut "store" at order level to the order_line level 
		@AuraEnabled public Store__c sourceStore {get;set;}

		public List<Customizations> getCustomizations(String code) {
			List<Customizations> additional_services = new List<Customizations>();

			// We search at shippingGroups level
			for(Customizations additional_service: this.additional_services) {
				if (additional_service.code == code) {
					additional_services.add(additional_service);
				}
			}

			// We search at lines level
			for (Lines line: this.lines) {
				for(Customizations additional_service: line.additional_services) {
					if (additional_service.code == code) {
						additional_services.add(additional_service);
					}
				}
			}

			return additional_services;
		}
		
		// Price adjustment Reason
		@AuraEnabled public String priceAdjustmentReason {get;set;}

		// Price adjustment Status
		@AuraEnabled public String priceAdjustmentStatus {get;set;}
		
		// Price adjustment Color
		@AuraEnabled public String priceAdjustmentColor {
			get {
				if (priceAdjustmentStatus == 'Rejected') {
					return 'red';
				}
				else if (priceAdjustmentStatus == 'Approved') {
					return 'green';
				}
				else if (priceAdjustmentStatus == 'New') {
					return 'orange';
				} else {
					return '';
				}
			}
		}
	
		// Clienteling Exception
		@AuraEnabled public String clientelingException {get;set;}
			
		// Gift message
		@AuraEnabled public String gift_message {
			get {
				String value = '';
				String separator = '';
				List<Customizations> customizationsGM = getCustomizations('GM');
				for(Customizations giftMessage: customizationsGM) {
					value = value + separator + giftMessage.message;
					separator = ', ';
				}

				return value;
			}
		}

		// Customization : Samples (Code='PS')
		@AuraEnabled public String samples {
			get {
				String value = '';
				String separator = '';

				List<Customizations> customizationsPS = getCustomizations('PS');
				
				system.debug('OL-Samples - customizationsPS: '+customizationsPS);
				for (Customizations sample: customizationsPS) {					
					system.debug('OL-Samples - sample: '+sample);
					value = value + separator + sample.label;
					separator = ', ';
				}
				system.debug('OL-Samples - value: '+value);
				return value;
			}
		}
		
		// Customization : Samples (Code='SB')
		@AuraEnabled public String shoppingBag {
			get {
				String value;
				String separator = '';
				List<Customizations> customizationsSB = getCustomizations('SB');
				for(Customizations shoppingBag: customizationsSB) {
					value = value + separator + shoppingBag.message;
					separator = ', ';
				}

				return value;
			}
		}

		@AuraEnabled public boolean hasPersonalization {
			get {
				return ( (hotStamping != null) || (engraving != null) || (nowYours != null)); 
			}
		}

		@AuraEnabled public Customizations hotStamping {
			get {
				List<Customizations> customizationsHS = getCustomizations('HS');
				if (customizationsHS.size() == 1) {
					return customizationsHS.get(0);
				}
				else return null;	
			}
		}

		
		@AuraEnabled public Customizations engraving {
			get {
				List<Customizations> customizationsHS = getCustomizations('EN');
				if (customizationsHS.size() == 1) {
					return customizationsHS.get(0);
				}
				else return null;	
			}
		}

		
		@AuraEnabled public Customizations nowYours {
			get {
				List<Customizations> customizationsNowYours = getCustomizations('recipeId');
				if (customizationsNowYours.size() == 1) {
					return customizationsNowYours.get(0);
				}
				else return null;	
			}	
		}

		@AuraEnabled
		public String statusIconics {
			get {
				if (isTwist && (reason.statusIconics__c != null))
					return reason.statusIconics__c;
				else return status;
			}
			//get;
			set;}
		@AuraEnabled
		public String statusInformation {get;set;}

		//
		@AuraEnabled
		public Double initialPrice {
			get {
				if (discount.amount != null && discount.amount > 0) {
					system.debug('initialPrice: '+ (unit_price + discount.amount));
					return (unit_price + discount.amount);
				}
				else return unit_price;
			}
		}

		// Order action "Return" is eligeable if : 
		//  (not a return itself) AND (not existing pending return) 
		//  AND (status 'fulfilled')
		//  AND ( ((deliveryStatus 'Delivered') AND (payment method is 'Cash on Delivery'))
		//		OR (payment method is NOT 'Cash on Delivery') )
		@AuraEnabled
		public Boolean isReturnAvailable {
			get {
				return ( !isReturn && !hasPendingReturn 
						&& (status == 'fulfilled') 
				     && ( ((shipment?.delivery_status == 'delivered') && (paymentMethod?.description == 'COD'))
							|| (paymentMethod?.description != 'COD') ) 
				      );
				// return true;
			}
		}

		// Order action "declareNoShowCOD" is eligeable if : 
		//  (not a return itself) AND (not existing pending return)
		//  AND orderStatus= ‘fulfilled’ AND deliveryStatus != 'delivered')
		//  AND (payment method is 'Cash on Delivery')
		@AuraEnabled
		public Boolean isDeclareNoShowCODAvailable {
			get {
				return ( !isReturn && !hasPendingReturn 
						&& (status == 'fulfilled')
						&& (shipment?.delivery_status != 'delivered') 
						&& (paymentMethod?.description == 'COD') );
				// return true;
			}
		}

		// Order action "declareFundsReception" is eligeable if : 
		//  (not a return itself) AND (not existing pending return)
		//  AND (status 'pending_payment')
		@AuraEnabled
		public Boolean isDeclareFundsReceptionAvailable {
			get {
				return ( !isReturn && !hasPendingReturn 
						&& (status == 'pending_payment'));
				// return true;
			}
		}

		// Order action "refund" is eligeable if :
		// CASE 1: (is a return) And (Status = 'accepted')
		// CASE 2: (Status = 'cancelled') AND (payment method is 'Bank Transfer') AND (exists "pending_payment" in status history)
		@AuraEnabled
		public Boolean isRefundAvailable {
			get {
				return ( (isReturn && (status == 'accepted')) 
					|| ((status == 'cancelled') && (paymentMethod?.description == 'VIB') &&  ( hasPendingPaymentInLogs || isATG )) );
				// return true;
			}
		}

		// Order action "Exchange" is eligeable if : 
		//  (not a return itself) AND (not existing pending return) 
		//  AND (status 'fulfilled')
		//  AND (channel in (WEB, CSC)) // TWIST-27414
		@AuraEnabled
		public Boolean isExchangeAvailable {
			get {
				return ( isReturnAvailable
						&& (orderChannel != 'STORE') // TWIST-27414 
						&& !isExchange); // TWIST-34953
				//  return false;
			}
		}

		// Order action "Approve/Refuse PMA" is eligeable if : 
		//  (not a return itself)
		//  AND (status 'pending')
		@AuraEnabled
		public Boolean isApproveRejectPMAAvailable {
			get {
				// return true;
				return ( !isReturn
						&& (status == 'pending') );
			}
		}

		// Order action "cancel" (for limited profiles) is eligeable if :
		// (Status in  ('created','pending approval', 'pendind payment')
		@AuraEnabled
		public Boolean isCancelLimitedAvailable {
			get {
				return (available_actions.contains('cancel') 
						&& !isReturn 
						&& (status == 'created' || status == 'pending' || status == 'pending_payment') );
			}
		}
	}
	
    public class Lines {
        // v2 : moved from 'order_lines' level
        @AuraEnabled public String item_id {get;set;}
        @AuraEnabled public Integer qty {get;set;}
        @AuraEnabled public Integer line_number {get;set;}
        @AuraEnabled public String item_description {get;set;}
        @AuraEnabled public Double unit_price {get;set;}
        @AuraEnabled public String unit_price_tax_free {get;set;}
        @AuraEnabled public String tax_amount {get;set;}
        @AuraEnabled public String kit_flag {get;set;}
        @AuraEnabled public Double line_amount_tax_free {get;set;}
        @AuraEnabled public Double line_amount {get;set;}
        @AuraEnabled public List<Taxes> taxe {get;set;}
        @AuraEnabled public List<Customizations> additional_services {get;set;}

        // v2 : new fields
        /*
        @AuraEnabled public String vat_specificity {get;set;}
        @AuraEnabled public String vat_classification {get;set;}
        @AuraEnabled public String unit_tax_amount {get;set;}
        @AuraEnabled public String pur_group {get;set;}
        @AuraEnabled public String pedimento_number {get;set;}
        @AuraEnabled public String item_stock_category {get;set;}
        @AuraEnabled public String fiscal_tax_code {get;set;}
        */

        // CUSTOM
		@AuraEnabled public ProductCatalogue__c productCatalogue {get;set;}
		@AuraEnabled public String productName {get;set;}
		@AuraEnabled public String productImage {get;set;}
		@AuraEnabled public String request_id {get;set;} // <TODO> copy of "request_id" at "shipping_groups" level
        @AuraEnabled public String shippingNumber {
			get {
				//return this.request_id+'-'+this.line_number;
                return this.request_id;
			}
		}
        @AuraEnabled public String shippingLineNumber {
			get {
				return this.request_id+'-'+this.line_number;
			}
		}
		@AuraEnabled public Shipments shipment {get;set;}
    }

	public class Taxes {
		@AuraEnabled public Double amount {get;set;} 
		@AuraEnabled public Double rate {get;set;} 
		@AuraEnabled public String description {get;set;} 
	}
	
	public class Requesting_location {
		@AuraEnabled public String xstore_id {get;set;} 
		@AuraEnabled public String rms_id {get;set;} 
		@AuraEnabled public String name {get;set;} 
		@AuraEnabled public String type {get;set;} 
		@AuraEnabled public String purchase_org {get;set;} 
		
	}

	public class ClientAdvisor {
		@AuraEnabled
		public String employee_id {get;set;} 
		@AuraEnabled
		public String CACode {get;set;} 
		@AuraEnabled
		public String WWEmployeeId {get;set;} 
		@AuraEnabled
		public String Name {get;set;} 
	}
	
	public class Tenders {
		@AuraEnabled public Double amount {get;set;} 
		@AuraEnabled public String account {get;set;} 
		@AuraEnabled public String payment_method {get;set;} 
		@AuraEnabled public String description {get;set;}

		//Custom
		@AuraEnabled public String payment_method_label {
			get {

				String pm;
				if(description!=null)
				{

					Payment_Method_Ref__mdt pmr = Payment_Method_Ref__mdt.getInstance(description);
					if (pmr != null) pm = pmr.label;
					else pm = description;
				}
				else pm= payment_method; //naomi fix for pay by link 07/2023

				
				return pm;
			}
		}

		@AuraEnabled public Boolean isPayByLink {
			get {
				return payment_method == 'PAY_BY_LINK';
			}
		}
	}
	
	public class Shipments {
		//@AuraEnabled public String request_id {get;set;} 
		@AuraEnabled public String carrier_name {get;set;} 
		@AuraEnabled public String carrier_service {get;set;} 
		@AuraEnabled public String tracking_number {get;set;} 
		@AuraEnabled public String tracking_link {get;set;} 
		@AuraEnabled public String delivery_date {get;set;} 
		@AuraEnabled public String delivery_status {get;set;} 
		@AuraEnabled public String delivery_status_date {get;set;} 
		// New Api version
		//@AuraEnabled public Double delivery_fees {get;set;}
		@AuraEnabled public String delivery_timeslot {get;set;}
		// New Api version - TWIST-29721
		@AuraEnabled public String initial_estimated_delivery_date_min {get;set;}
		@AuraEnabled public String initial_estimated_delivery_date_max {get;set;}
		@AuraEnabled public String estimated_delivery_date_min {get;set;}
		@AuraEnabled public String estimated_delivery_date_max {get;set;}
		@AuraEnabled public Double delivery_fees_without_tax {get;set;}
	}

    public class Fees {
        @AuraEnabled public Double total_amount {get;set;} 
        //@AuraEnabled public Double tax_amount_free {get;set;} 
        @AuraEnabled public Double amount_tax_free {get;set;} 
        @AuraEnabled public Double tax_amount {get;set;} 
        @AuraEnabled public String type {get;set;} 
        @AuraEnabled public List<Taxes> taxes {get;set;} 
    }
	
	// --------------------------------------------------------------------------------------
	// --------------------------------------------------------------------------------------
	public List<String> getSkuIdList() {
		List<String> skuIdList = new List<String>();

		for(Shipping_groups orderLine: this.shipping_groups) {
            for(Lines line: orderLine.lines) {
                skuIdList.add(line.item_id);

				// If samples in Line
				if (line?.additional_services != null) {
					for(Customizations additional_service: line?.additional_services) {
						if (additional_service.code == 'PS') {
							skuIdList.add(additional_service.message);
						}
					}
				}
            }

			// If samples in orderLine
			if (orderLine?.additional_services != null) {
				for(Customizations additional_service: orderLine?.additional_services) {
					if (additional_service.code == 'PS') {
						skuIdList.add(additional_service.message);
					}
				}
			}

		}


		return skuIdList;
	}
	@AuraEnabled
	public Boolean hasDownloadInvoice{
		get{
			Boolean downloadInvoice = false;
			List<String>  statusShippingFulfilled = new List<String>{'fulfilled'};

			for(Shipping_groups orderLine: this.shipping_groups) {
				if (statusShippingFulfilled.contains(orderLine.status.toLowerCase())) {
					downloadInvoice = true;
					break;
				}
			}		
			return downloadInvoice;
		}
	}

	@AuraEnabled
		public Boolean isManualRefundShippingFees {
			get {
				system.debug('nao in manual refund');
				if(this.sumOfShippingFeesWithoutTax!=null && this.sumOfShippingFeesWithoutTax>0)
				{
				
					for(Shipping_groups orderLine: this.shipping_groups) {
						if (orderLine.isRefundAvailable) {
							return true;
						}
					}	
					for(Traceability__c tracea : this.traceabilities)
					{
						system.debug('nao tracea'+ tracea.Action__c);
						if(tracea.Action__c=='refund_delivery_fees')
						{
							return true;
						}
					}
				}
				return false;
		}
	}

	@AuraEnabled
	public Boolean hasCancel{
		get {
			Boolean hasCancel = false;
			for(Shipping_groups orderLine: this.shipping_groups) {
				if (orderLine.available_actions.contains('cancel') && !orderline.isReturn) {
					hasCancel = true;
					break;
				}
			}		
			return hasCancel;
		}
	}

	@AuraEnabled
	public Boolean hasCancelReturn{
		get {
			Boolean hasCancelReturn = false;
			for(Shipping_groups orderLine: this.shipping_groups) {
				if (orderLine.available_actions.contains('cancel')  && orderline.isReturn) {
					hasCancelReturn = true;
					break;
				}
			}		
			return hasCancelReturn;
			}
		}

// --------------------------------------------------------------------------------------
// Init methods
// --------------------------------------------------------------------------------------
	public void initOrderLine(){
        for(Shipping_groups orderLine: shipping_groups) {
            // Order_Type
            orderLine.order_type = order_type;
			// Currency__z
			orderLine.currency_Z = currency_Z;
			// isTwist
			orderLine.isTwist = isTwist;
			//isATG
			orderLine.isATG = isATG;
			// Source Store : usefull for "Order Actions"
			orderLine.sourceStore = store;
			// Channel  
			orderLine.orderChannel = channel; // TWIST-27414
			// payment method
			orderLine.paymentMethod = paymentMethod;

		}

		for(Shipping_groups orderLine: shipping_groups) {
			// isExchange - TWIST-34953
			// In a differente loop because in "isExchange" method we loop over shipping_groups and need the value of "order_type",
			// and if there are more than 1 shipping_groups, the order_type for shipping_groups[n+1] is empty and throw and exception
			// in "isExchange"
			orderLine.isExchange = isExchange;
		}
	}

	// TWIST-29860
	public void initOrderLineLinkedShippingGroup(){
		Map<String, Shipping_groups> sgMap = new Map<String, Shipping_groups>();

		for(Shipping_groups orderLine: shipping_groups) {
			sgMap.put(orderLine.request_id, orderLine);
		}

		// 
		for(Shipping_groups orderLine: this.shipping_groups) {
			for(LinkedShippingGroup lsg: orderLine.linked_shipping_groups) {
				if (sgMap.containsKey(lsg.request_id)) {
					lsg.status = ((Shipping_groups)sgMap.get(lsg.request_id)).status;
					lsg.isPartOfThisOrder = true; // 
				}
				else {
					lsg.isPartOfThisOrder = false;
				}
			}
		}

	}

	public void initOrderLineProductDetails(Map<String,ProductReferential__c> skuProductByCode){
		for(Shipping_groups orderLine: shipping_groups) {
            for(Lines line: orderLine.lines) {
				
				system.debug('skuProductByCode?.get(line.item_id):');
				system.debug(skuProductByCode?.get(line.item_id));
				system.debug('productName');
                line.productName = (skuProductByCode?.get(line.item_id)!=null)?skuProductByCode.get(line.item_id).Name:line.item_id;
				system.debug('productImage');
                line.productImage = (skuProductByCode?.get(line.item_id)!=null)?skuProductByCode.get(line.item_id).SPO_ImageLink1FrontView__c:null;
				system.debug('shipment');
				line.shipment = orderLine.shipment;
				system.debug('request_id');
				line.request_id = orderLine.request_id;
            }
		}
	}

	public void initOrderLineCustomizations(Map<String,ProductReferential__c> skuProductByCode){
		for(Shipping_groups orderLine: shipping_groups) {
			if (orderLine?.additional_services != null) {
				for(Customizations customization: orderLine?.additional_services) {
					// // If samples in order
					if (customization.code == 'PS') {
						customization.label = (skuProductByCode?.get(customization.message)!=null)?skuProductByCode.get(customization.message)?.Name:customization.message;
					}
				}
			}
////
			for(Lines line: orderLine.lines) {
				// If samples in Line
				if (line?.additional_services != null) {
					for(Customizations customization: line?.additional_services) {
						if (customization.code == 'PS') {
							customization.label = (skuProductByCode?.get(customization.message)!=null)?skuProductByCode.get(customization.message)?.Name:customization.message;
						}
					}
				}
            }
		}		
	}

	public void initOrderLineReason(Map<String,OrderShipping__c> shippings){
		OrderShipping__c orderShipping;

		for(Shipping_groups orderLine: shipping_groups) {
			orderShipping = shippings.get(orderLine.shippingNumber);
			
			orderLine.reason = (orderShipping!=null?orderShipping:new OrderShipping__c());
		}
	}

	public void initOrderLineProductCatalogue(Map<String, ProductCatalogue__c> productCatalogMap){
		for(Shipping_groups orderLine: shipping_groups) {
            for(Lines line: orderLine.lines) {
                if (productCatalogMap.get(line.item_id) != null)
                line.productCatalogue = productCatalogMap.get(line.item_id);
                else line.productCatalogue = new ProductCatalogue__c();
            }
		}
	}
	
	public String getReasonToDisplay(Order_Note__c orderNote) {
		String reason;
		if (orderNote != null) {
			if(orderNote.reason__c == 'NoneOfAbove') {
				reason = orderNote.description__c;
			}
			else reason = (String)orderNote.get('ReasonLabel');
		}
		return reason;
	}

	public void initOrderOrderNote(Map<String, Order_Note__c> orderNotes) {
		Long milliseconds;
		freeShippingReason = getReasonToDisplay(orderNotes?.get(OrderNoteService.FREE_SHIPPING));

		// PayByLink is only available the first hour after it is created.
		isPayByLinkExpired = false;
		if (orderNotes?.get(OrderNoteService.PAYMENT_LINK) != null) {
			milliseconds = DateTime.now().getTime()-orderNotes?.get(OrderNoteService.PAYMENT_LINK)?.createdDate.getTime();
			payByLink = (milliseconds<(1000*60*60)?orderNotes?.get(OrderNoteService.PAYMENT_LINK)?.description__c:null);
			isPayByLinkExpired = (milliseconds>(1000*60*60));

		}
		// ExtendedPayByLink is only available the first 14 days after it is created.
		isExtendedPayByLinkExpired = false;
		if (orderNotes?.get(OrderNoteService.EXTENDED_PAYMENT_LINK) != null) {
			milliseconds = DateTime.now().getTime()-orderNotes?.get(OrderNoteService.EXTENDED_PAYMENT_LINK)?.createdDate.getTime();
			extendedPayByLink = (milliseconds<(1000*60*60*24*14)?orderNotes?.get(OrderNoteService.EXTENDED_PAYMENT_LINK)?.description__c:null);
			isExtendedPayByLinkExpired = (milliseconds>(1000*60*60*24*14));
		}

		// BEFORE Accepted/refused -> PayAfterAgreement is only available the first 24 hour after it is created.
		// AFTER Accepted/refused -> PayAfterAgreement is only available the first 24 hour after Accepted/refused is created.
		payAfterAgreement = orderNotes?.get(OrderNoteService.PAY_AFTER_AGREEMENT);
		isPayAfterAgreementLinkExpired = false;
		if (orderNotes?.get(OrderNoteService.PAY_AFTER_AGREEMENT) != null) {
			if (orderNotes?.get(OrderNoteService.PERSO_PRODUCT_ACC) != null) {
				milliseconds = DateTime.now().getTime()-orderNotes?.get(OrderNoteService.PERSO_PRODUCT_ACC)?.createdDate.getTime();
			}
			else if (orderNotes?.get(OrderNoteService.PERSO_PRODUCT_REF) != null) {
				milliseconds = DateTime.now().getTime()-orderNotes?.get(OrderNoteService.PERSO_PRODUCT_REF)?.createdDate.getTime();
			}			
			else {
				milliseconds = DateTime.now().getTime()-orderNotes?.get(OrderNoteService.PAY_AFTER_AGREEMENT)?.createdDate.getTime();
			}			
			payAfterAgreementLink = (milliseconds<(1000*60*60*24)?orderNotes?.get(OrderNoteService.PAY_AFTER_AGREEMENT)?.description__c:null);
			isPayAfterAgreementLinkExpired = (milliseconds>(1000*60*60*24));
			
		}

		// PersoProductAccepted
		persoProductAccepted = orderNotes?.get(OrderNoteService.PERSO_PRODUCT_ACC);
		
		// PersoProductRefused
		PersoProductRefused = orderNotes?.get(OrderNoteService.PERSO_PRODUCT_REF);
		PersoProductRefusedReason = getReasonToDisplay(orderNotes?.get(OrderNoteService.PERSO_PRODUCT_REF));
	}

	public void initOrderLineOrderNote(Map<String, Map<String, Order_Note__c>> orderNotes) {
		Map<String, Order_Note__c> orderNoteTypeMap; 
		Order_Note__c orderNote;
		for(Shipping_groups orderLine: shipping_groups) {
			orderLine.clientelingException = getReasonToDisplay(orderNotes?.get(orderLine.shippingNumber)?.get(OrderNoteService.CLIENTELING_EXCEPTION));
			orderLine.priceAdjustmentReason = getReasonToDisplay(orderNotes?.get(orderLine.shippingNumber)?.get(OrderNoteService.PRICE_ADJUSTMENT));
		}
	}

	public void initApprovalCases(Map<String, Map<String, Case>> approvalCases) {
		// approvalCases
		system.debug('approvalCases:'+approvalCases);
		// Init "Price Adjustment Status"
		for(Shipping_groups orderLine: shipping_groups) {
			orderLine.priceAdjustmentStatus = approvalCases?.get(orderLine.shippingNumber)?.get('PRICE_ADJUSTMENT')?.Status;
		}
	}

    // <TODO> update ICX_OrderShippingStatusService
	public void initOrderLineStatusIconics(){
		if (isTwist)
			ICX_OrderShippingStatusService.setIconicsShippingGroupStatusHistory(this);
	}

// ---------------------------------------------------------------------------------------------------------
// ---------------------------------------------------------------------------------------------------------
	public Account getAccount(String orderNumber){
		//Map<String,String> accountName = new Map<String,String>();
		Account acc = new Account();
		if(String.isNotBlank(orderNumber)){
			List<Order__c> orderRecord = [SELECT Account__c,Account__r.Name, Account__r.DREAMID__c  FROM Order__c WHERE OrderNumber__c = :orderNumber  limit 1];
			if(!orderRecord.isEmpty()){
				acc.Id = orderRecord.get(0).Account__c;
				acc.Name = orderRecord.get(0).Account__r.Name;
				acc.DREAMID__c = orderRecord.get(0).Account__r.DREAMID__c;
			} 
		}
		return acc;
	}
	
	public Order__c getOrder(String orderNumber){
		//Map<String,String> accountName = new Map<String,String>();
		Order__c order = new Order__c();
		String  statusIconics;
		if(String.isNotBlank(orderNumber)){
			List<Order__c> orderRecord = [SELECT Id, statusIconics__c  FROM Order__c WHERE OrderNumber__c = :orderNumber  limit 1];
			if(!orderRecord.isEmpty()){
				order = orderRecord.get(0);
			} 
		}
		return order;
	}

    public Map<String,Store__c> getStoreName(List<String> storeID){
        //get name of the store  
        Map<String,Store__c> storeList = new Map<String,Store__c>();
        for (Store__c store :  [SELECT id,Name,RetailStoreId__c,StoreCountry__c, StoreType__c FROM Store__c WHERE RetailStoreId__c IN:storeID]){
            if(!storeList.containsKey(store.RetailStoreId__c)){
                storeList.put(store.RetailStoreId__c,store);
            }
        }
        return storeList;
    }

	public Map<String,ProductReferential__c> getProductBySKU(List<String> listSku){
		// get product referential for the name of the product and the image 
		Map<String,ProductReferential__c> skuProductByCode = new Map<String,ProductReferential__c>();
		for (ProductReferential__c product :  [SELECT id,Name, SKUCode__c ,SPO_ImageLink1FrontView__c FROM ProductReferential__c WHERE SKUCode__c IN:listSku]) {
			if(!skuProductByCode.containsKey(product.SKUCode__c)){
				skuProductByCode.put(product.SKUCode__c,product);
			}
		}

		return skuProductByCode;
	}

    public Map<String,OrderShipping__c> getShipping(String orderId){
        // get more details about the shipipng 
        Map<String,OrderShipping__c> shippings = new Map<String,OrderShipping__c>();
        for (OrderShipping__c shipping :  [SELECT Id, ShippingNumber__c, ShippingNumberV2__c,FORMAT(SubmitedDate__c),SubmitedBy__c, SubmitedBy__r.Name, Reason__c, tolabel(Action__c), Pickup_Location__c, statusIconics__c FROM OrderShipping__c WHERE Order__r.OrderNumber__c =:orderId ]) {
            if(!shippings.containsKey(shipping.ShippingNumberV2__c)){
                shippings.put(shipping.ShippingNumberV2__c,shipping);
            }
        }
        return shippings;
    }

	public Map<String, ProductCatalogue__c> getProductMap(List<String> SKUList){
        Map<String, ProductCatalogue__c> productMap = new Map<String, ProductCatalogue__c>();
        for (ProductCatalogue__c p : [SELECT id, SKU__c FROM ProductCatalogue__c where SKU__c in:SKUList ]) {
            productMap.put(p.SKU__c, p);
        }
        return productMap;
    }

	public User getUserDetails(String WWEmployeeNumber){
        User usr;
        if(String.isNotBlank(WWEmployeeNumber)){
            List<User> userRecord = [SELECT Id, Name FROM User WHERE WWEmployeeNumber__c = :WWEmployeeNumber  limit 1];
            if(!userRecord.isEmpty()){
                usr = userRecord.get(0);
            } 
        }
        return usr;
     }

	 // Return a map of Order_Note__c by Type by Number (Order or Shipping)
	 //
 	 // Map<OrderNumber or ShippingNumber; 
	 //		Map<Order_Note__c.type__c
	 //			Order_Note__c>
	 //		>
	 public Map<String, Map<String, Order_Note__c>> getOrderNotes(String orderNumber){
		Map<String, Map<String, Order_Note__c>> orderNoteByNumber = new Map<String, Map<String, Order_Note__c>>();
		for (Order_Note__c orderNote : OrderNoteService.getOrderNoteByOrders(new List<String>{orderNumber}, new List<String>{OrderNoteService.CLIENTELING_EXCEPTION, OrderNoteService.PRICE_ADJUSTMENT, OrderNoteService.FREE_SHIPPING, OrderNoteService.PAYMENT_LINK, OrderNoteService.EXTENDED_PAYMENT_LINK, OrderNoteService.PAY_AFTER_AGREEMENT, OrderNoteService.PERSO_PRODUCT_ACC, OrderNoteService.PERSO_PRODUCT_REF})) {
			String keyMap;
			// If the Order_Note is at Order level
			if (orderNote.Order_Shipping__c == null) {
				keyMap = orderNote.Tech_OrderNumber__c;
			}
			//If the Order Note is at Shipping Group level
			else {
				keyMap = orderNote.Tech_ShippingNumberV2__c;
			}
			
			if (!orderNoteByNumber.containsKey(keyMap)) {
				orderNoteByNumber.put(keyMap, new Map<String, Order_Note__c>());
			}
			orderNoteByNumber.get(keyMap).put(orderNote.type__c, orderNote);
			
		}
		return orderNoteByNumber;
	 }

	public List<Traceability__c> getTraceability(string orderNumber)
	{
		return TraceabilityService.selectByOrderNumber(orderNumber,false);
	}

	 // Return a map of Approval Case by Type by Number (Order or Shipping)
	 //
 	 // Map<OrderNumber or ShippingNumber; 
	 //		Map<Case.Approval_Type__c
	 //			Case>
	 //		>
	 public Map<String, Map<String, Case>> getRelatedApprovalCases(String orderNumber){
		
		Map<String, Map<String, Case>> relatedApprovalCasesMap = new Map<String, Map<String, Case>>();
		
		for (Case approvalCase : OrderNoteService.getRelatedApprovalCases(new List<String>{orderNumber})) {
        
			String keyMap;
            
            keyMap = (approvalCase.Order_Shipping__r?.ShippingNumberV2__c!=null)?approvalCase.Order_Shipping__r.ShippingNumberV2__c:approvalCase.Order__r.OrderNumber__c;

			if (!relatedApprovalCasesMap.containsKey(keyMap)) {
				relatedApprovalCasesMap.put(keyMap, new Map<String, Case>());
			}
			relatedApprovalCasesMap.get(keyMap).put(approvalCase.Approval_Type__c, approvalCase);			
		}
		return relatedApprovalCasesMap;
	 }

}