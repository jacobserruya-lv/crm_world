<apex:page lightningStyleSheets="true" ><!--allowDml="true" controller="AddressAutocompleteController"-->

    <html xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" lang="en">

        <!-- Google Places API -->
    <script src="https://maps.googleapis.com/maps/api/js?libraries=places&key={!$Setup.IconicsSettings__c.GooglePlaceKey__c}">/> <!--AddressAutocompleteGoogleKey__c.Key__c}"></script-->

    <script>
        //var lexOrigin = 'https://louisvuitton--iconics.lightning.force.com';
            window.addEventListener("message", function(event) {
                console.log("addEventListener");
                if (event.origin.indexOf("lightning.force.com") === -1) {
                    // Not the expected origin: reject message!
                    return;
                }
                
                // Handle message
                console.log("data", event.data);
                var input = document.getElementById('autocomplete_one');
                input.value = event.data.search;
                //input.focus();

            }, false);
    </script>
            

    <apex:pageMessages />
        <div class="slds-form-element">
         
            <label class="slds-form-element__label"></label>

            <div class="slds-form-element__control slds-input-has-icon slds-input-has-icon_left">
                <!--lightning:icon iconName="utility:checkin" size="x-small" alternativeText="Search a location" class="slds-input__icon slds-input__icon_left"/-->
                <!--span class="slds-icon_container slds-icon-utility-checkin">
                <svg class="slds-icon slds-input__icon slds-input__icon_left slds-icon-text-default slds-icon_x-small" aria-hidden="true">
                    <use xlink:href="{!URLFOR($Asset.SLDS, 'assets/icons/utility-sprite/svg/symbols.svg#checkin')}"></use>
                </svg>
                </span-->
                <input type="text" class="slds-input" id="autocomplete_one" placeholder="Enter a location powered by Google" style="width:99%;border: 2px solid #80808082;" onfocus="focuse();" onblur="unfocus();" onkeyup="focuse();"/>
            </div>
        </div>


	<!-- Run script after everything above has loaded -->
	<script>
    // lightningHost
    
        var autoCompleteOne;	
    //var autoCompleteTwo;

    	var lightningDomain = 'https://' + '{!$CurrentPage.parameters.lightningDomain}';//'https://louisvuitton--iconics.lightning.force.com';//'{Setup.IconicsSettings__c.lightningDomain__c}';
        function sendToLC(message) {
            //var hostname = window.location.hostname;
            //var arr = hostname.split(".");
            //var instance = arr[0];
            //console.log("hostname", hostname);
            //console.log("instance", instance); // http://louisvuitton--c.na46.visual.force.com
            //console.log("lightningDomain", lightningDomain);
            parent.postMessage(message, lightningDomain);//lightningDomain);//'https://louisvuitton--iconics.lightning.force.com');//'https://louisvuitton--iconics.cs70.my.salesforce.com');
        }

		// This example displays an address form, using the autocomplete feature
		// of the Google Places API to help users fill in the information.

		function fillInAddress(addressNo) {

			var place;

			// Get the place details from the autocomplete object.
			if (addressNo == 'one') {
				place = autoCompleteOne.getPlace();
                //console.log("place", JSON.stringify(place));
                
                var message = {
                    type : "Place",
                	address : JSON.stringify(place)
                };
                
                sendToLC(message);
			} 
			else {
                //place = autoCompleteTwo.getPlace();
			}

			// Variables to extract from response
            /*var street = '';
			var city = '';
			var state = '';
			var postcode = '';
			var country = '';
 
			// Get each component of the address from the place details
			// and fill the corresponding field on the form.
			for (var i = 0; i < place.address_components.length; i++) {

				// The Google address type
				var addressType = place.address_components[i].types[0];

				// Set address variables
				if (addressType == 'street_number') {
					street = place.address_components[i]['long_name'];
				}
				else if (addressType == 'route') {
					street += ' ' + place.address_components[i]['long_name'];
				}
				else if (addressType == 'locality') {
					city = place.address_components[i]['long_name'];
				}
				else if (addressType == 'administrative_area_level_1') {
					state = place.address_components[i]['long_name'];
				}
				else if (addressType == 'administrative_area_level_2' && state == '') {
					state = place.address_components[i]['long_name'];
				}
				else if (addressType == 'country') {
					country = place.address_components[i]['long_name'];
				}
				else if (addressType == 'postal_code') {
					postcode = place.address_components[i]['long_name'];
				}

			}*/
		}
        
		function initialize() {

			// Create the autocomplete object, restricting the search
			// to geographical location types.
			autoCompleteOne = new google.maps.places.Autocomplete(
			    (document.getElementById('autocomplete_one')),
			    { types: ['geocode'] });

			// When the user selects an address from the dropdown,
			// populate the address fields in the form.
			google.maps.event.addListener(autoCompleteOne, 'place_changed', function() {
                console.log("google.maps.event.addListener");
				fillInAddress('one');
                unfocus();                
			});

			// Only if AddressTwo is provided
		}

		initialize();


        
		function focuse() {

            var googleResults = document.getElementsByClassName("pac-item");//$(".pac-container").children();//$(".pac-item");
            console.log('googleResults' + googleResults);
            console.log("googleResults Size", googleResults.length);
            for (let item of googleResults) {
               console.log(item);
            }
            
            // Because of the iframe (VF in Lightning Component), change the Heigth of the iframe to display the results
            var resultHeight = '2.5rem;';
            switch (googleResults.length) {
                case 0:
                    resultHeight = '2.5rem;';
                    break;
                /*case 1:
                    resultHeight = '7.5rem;';//'5rem;';
                    break;
                     case 2:
                    resultHeight = '7rem;';
                    break;
                case 3:
                    resultHeight = '9rem;';
                    break;
                case 4:
                    resultHeight = '11rem;';
                    break;*/
                default:
                    resultHeight = '13rem;';
            }
            
            var message = {
                focus : true,
                height : resultHeight// '2.5rem;'//
            };
            sendToLC(message);
		}
            
            function unfocus() {
                var message = {
                    focus : false
                };
                sendToLC(message);
            }

        </script>

	<!--script src="URLFOR($Resource.GoogleJS)}"></script-->

    </html>
</apex:page>