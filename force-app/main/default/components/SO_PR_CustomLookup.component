<apex:component controller="SO_CustomLookup_Con" selfclosing="true">
    <apex:attribute name="SObject" description="SOQL Object to query"
                    type="String" assignto="{!sObjVal}" required="true" />
    <apex:attribute name="labelField"
                    description="API Name of Field to display for label" type="String"
                    required="true" assignto="{!labelFieldVar}" />
    <apex:attribute name="valueField"
                    description="API Name of Field to display for value that is passed to the targetField"
                    type="String" required="true" assignto="{!valueFieldVar}" />
    <apex:attribute name="targetField"
                    description="Field of current object that will hold the selection."
                    type="Object" assignto="{!targetFieldVar}" />               
    <apex:attribute name="inputFieldId"
                    description="Id of the field where the value will copied[Not generally required, used when you need to copy value to a field using js]"
                    type="String" />
    <apex:attribute name="importJquery"
                    description="Assign false if you dont want to jquery files"
                    type="Boolean" default="true" />
    <apex:attribute name="syncManualEntry"
                    description="Allow manual entry of data from autocomplete component."
                    type="Boolean" default="true" />
    <apex:attribute name="allowClear" description="Set true to give user a option to clear existing value" type="Boolean" default="true" />

    <apex:attribute name="productCategory" description=" the productCategory filter in the search;if empty string -> without filter " type="String" default="" />

    <apex:attribute name="Style" description="style for the input component" type="String" />

    <apex:attribute name="isRequired" description="Set true to make this input mandatory, else to false" type="Boolean" default="false" />

    <apex:attribute name="isCustomRequired" description="Set true to make this input mandatory by a cusotm validation method, else to false" type="Boolean" default="false" />

    <apex:attribute name="cancelHideUponPressingX"
                    description="this will cancel the removal of the button even if x is pressed, while its true"
                    type="String"
                    default="false" />

    <!--Required js files-->
    <apex:outputpanel rendered="{!importJquery}">
        <apex:includescript value="https://ajax.googleapis.com/ajax/libs/jquery/1.10.2/jquery.min.js" />
    </apex:outputpanel>
 
    <link rel="stylesheet" type="text/css" href="{!URLFOR($Resource.select2, 'select2-3.4.2/select2.css')}" />
    <script type="text/javascript" src="{!URLFOR($Resource.select2, 'select2-3.4.2/select2.js')}" />

    <style type="text/css">
      ul.select2-results li:first-child 
      {
        display: none !important;
      }
    </style>

    <script>
        var v2{!randomJsIden}

        var prevVal{!randomJsIden};
        function autocompleteV2{!randomJsIden}(){
             var v2=this;
             jQuery(function($){ //on document.ready
                    v2.init($)
             });
        }

        autocompleteV2{!randomJsIden}.prototype={
            init : function($){

                       var $elem = $( ".auto{!randomJsIden}" ).select2({
                           minimumInputLength: 1,
                           placeholder: "No value selected",
                           allowClear : {!allowClear},
                           query: function (query) {
                               queryData{!randomJsIden}(query);

                           },
                           createSearchChoice:function(term, data) {
                                if({!syncManualEntry} == true){
                                    return {id:term, text:term};
                                }
                            }
                       });

                       $elem.on("select2-selecting", function(e) {

                           $('.hiddenField{!randomJsIden}').val(e.val);
                       });

                       $elem.on("select2-removed", function(e) {
                           $('.hiddenField{!randomJsIden}').val('');
                       });



                       if('{!cacheField}' !=''){
                           $elem.select2("data", {id: "{!targetFieldVar}", text: "{!cacheField}"})
                       }

                    },

            triggerSearch :function(val){

                                if(prevVal{!randomJsIden} != val){
                                    $=jQuery;
                                    prevVal{!randomJsIden} = val;
                                    var select = $('input.auto{!randomJsIden}');
                                    var search = $('.select2-input')
                                    select.select2('open');
                                    search.val(val);
                                    search.trigger("input");
                                }
                            }
        }





         /*
        *This method queries data according to the passed parameter
        *and populates the combobox accordingly
        ***/
        function queryData{!randomJsIden}(query){

           Visualforce.remoting.Manager.invokeAction(
                     '{!$RemoteAction.SO_CustomLookup_Con.getData}','{!sObjVal}','{!labelFieldVar}','{!valueFieldVar}','{!productCategory}',query.term,
                     function(result, event){

                         //if success
                         if(event.status){
                             var data = {results: []}
                             data.results = result;
                             query.callback( data);
                         }
                         else{
                              alert('Invalid Field/Object API Name : '+event.message);
                         }

                     },
                      {escape: true}
                );
            }


    </script>

    <apex:inputtext id="lookupMockValueId" 
      style="{!Style}" 
      styleclass="auto{!randomJsIden}" 
      value="{!cacheField}" 
      html-data-rule-required="{!isRequired}"
      html-data-rule-manufacturingRequired="{!isCustomRequired}"/>

    <apex:outputpanel id="hiddenPanel">
        <apex:inputtext value="{!targetField}" id="hiddenField"
                        styleclass="hiddenField{!randomJsIden}" style="display:none" />
    </apex:outputpanel>
    <script>v2{!randomJsIden} = new autocompleteV2{!randomJsIden}({});</script>
</apex:component>