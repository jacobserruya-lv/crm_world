@isTest
public with sharing class WS019_CreateDepositHandler_TEST {
    @TestSetup
	static void init() {
		Store__c store = new Store__c(Name = 'Test Store', RetailStoreId__c = 'A06');
		insert store;

		Opportunity order = new Opportunity();
		order.Name = 'Test Order'; 
		order.StageName = 'Brief in progress';
		order.CloseDate = Date.today();
		order.SPO_DepositSentStatusDate__c = Date.today();
		order.Received_in_Store_Date__c = Date.today();
		order.RecordTypeId = Schema.SObjectType.Opportunity.getRecordTypeInfosByName().get('Perso Order').getRecordTypeId();
		order.SPO_Store__c = store.Id;
		insert order;

		List<SPO_FirmOrder__c> fosToInsert = new List<SPO_FirmOrder__c>{
            new SPO_FirmOrder__c(
                SPO_BriefName__c = order.Id,
                LineNumber__c = 1,
                SPO_TechETLStatus__c = 'V',
                SPO_FirmOrderStatus__c = 'Creation in progress'
            )
        };
		insert fosToInsert;

	}

    @isTest
    public static void test_createDepositOrPaymentIntoXStore() {
        Opportunity order = [
                       SELECT Id, SPO_StoreCode__c,SPO_Estimated_date_NOMTO__c,CreatedDate,SPO_wwRMSClientId__c ,SPO_RMSClientId__c, OrderNumber__c, SPO_caCode__c, SPO_DepositAmount__c,
            SPO_SkuQuantity__c, SPO_UnitRetailPriceQuotation__c, SPO_SpecialOrderSKUCode__c, SPO_DepositNumber__c
            FROM Opportunity 
            LIMIT 1
        ];

        Test.setMock(WebServiceMock.class, new WS019_CreateDepositHandler_TEST.MockSuccess());
        WS019_CreateDepositHandler.Result r = WS019_CreateDepositHandler.createDepositOrPaymentIntoXStore(true, order);
        r = WS019_CreateDepositHandler.createDepositOrPaymentIntoXStore(false, order);

        try {
            Test.setMock(WebServiceMock.class, new WS019_CreateDepositHandler_TEST.MockError());
            r = WS019_CreateDepositHandler.createDepositOrPaymentIntoXStore(false, order);
           // System.assert(false, 'No exception thrown');
        } catch(SO_UTIL.RMSException e) {
            // success
        }
    }

    public class MockSuccess implements WebServiceMock  {
        public void doInvoke(
            Object stub,
            Object request,
            Map<String, Object> response,
            String endpoint,
            String soapAction,
            String requestName,
            String responseNS,
            String responseName,
            String responseType) {

            // Create response element from the autogenerated class.
            // Populate response element.
            // Add response element to the response parameter, as follows:

            WS019_CreateDeposit.DataResponse dResp = new WS019_CreateDeposit.DataResponse();
			dResp.transactionNumber = '14712';
			dResp.depositNumber = '14712';
			
			WS019_CreateDeposit.salesCreationResponse scResp = new WS019_CreateDeposit.salesCreationResponse();
			scResp.DataResponse = dResp;

            WS019_CreateDeposit.salesCreationFromNYResponse responseElement = new WS019_CreateDeposit.salesCreationFromNYResponse();
            responseElement.LVResponse = scResp;
            
            response.put('response_x', responseElement); 
        }
    }
    
    public class MockError implements WebServiceMock  {
        public void doInvoke(
            Object stub,
            Object request,
            Map<String, Object> response,
            String endpoint,
            String soapAction,
            String requestName,
            String responseNS,
            String responseName,
            String responseType) {

            // Create response element from the autogenerated class.
            // Populate response element.
            // Add response element to the response parameter, as follows:

            WS019_CreateDeposit.error errResp = new WS019_CreateDeposit.error();
			errResp.code = 'RMS-0001';
			errResp.level = 'ERROR';
			errResp.source = 'RMS';
			errResp.httpRespMsg = 'Le code client RMS n\'existe pas.';
			errResp.timestamp = '1567588643517';
			WS019_CreateDeposit.error[] errList = new WS019_CreateDeposit.error[]{errResp};

			WS019_CreateDeposit.errors errsResp = new WS019_CreateDeposit.errors();
            errsResp.httpRespCode = '500';
            errsResp.httpRespMsg = 'Unvailable service';
            errsResp.error = errList;

			WS019_CreateDeposit.salesCreationResponse scResp = new WS019_CreateDeposit.salesCreationResponse();
			scResp.errors = errsResp;

            WS019_CreateDeposit.salesCreationFromNYResponse responseElement = new WS019_CreateDeposit.salesCreationFromNYResponse();
            responseElement.LVResponse = scResp;
            
            response.put('response_x', responseElement); 
        }
    }
}